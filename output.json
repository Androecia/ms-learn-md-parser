[
  {
    "group": "frontmatter",
    "text": "---\ntitle: Markdown reference for Microsoft Learn\ndescription: Learn the Markdown features and syntax used in Microsoft Learn content.\nauthor: meganbradley\nms.author: mbradley\nms.date: 11/09/2021\nms.topic: contributor-guide\nms.prod: non-product-specific\nms.custom: external-contributor-guide\n---"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "# Learn Markdown reference"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "## Alerts (Note, Tip, Important, Caution, Warning)"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```md\n> [!NOTE]\n> Information the user should notice even if skimming.\n\n> [!TIP]\n> Optional information to help a user be more successful.\n\n> [!IMPORTANT]\n> Essential information required for user success.\n\n> [!CAUTION]\n> Negative potential consequences of an action.\n\n> [!WARNING]\n> Dangerous certain consequences of an action.\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "alert",
    "text": "> [!NOTE]\n> Information the user should notice even if skimming.\n"
  },
  {
    "group": "alert",
    "text": "> [!TIP]\n> Optional information to help a user be more successful.\n"
  },
  {
    "group": "alert",
    "text": "> [!IMPORTANT]\n> Essential information required for user success.\n"
  },
  {
    "group": "alert",
    "text": "> [!CAUTION]\n> Negative potential consequences of an action.\n"
  },
  {
    "group": "alert",
    "text": "> [!WARNING]\n> Dangerous certain consequences of an action.\n"
  },
  {
    "group": "heading",
    "text": "## Angle brackets"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "## Apostrophes and quotation marks"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "list",
    "text": "- Left (opening) quotation mark: `&#8220;`\n- Right (closing) quotation mark: `&#8221;`\n- Right (closing) single quotation mark or apostrophe: `&#8217;`\n- Left (opening) single quotation mark (rarely used): `&#8216;`\n"
  },
  {
    "group": "alert",
    "text": "> [!TIP]\n> To avoid \"smart\" characters in your Markdown files, rely on the Learn Authoring Pack's smart quote replacement feature. For more information, see [smart quote replacement](docs-authoring/smart-quote-replacement.md).\n"
  },
  {
    "group": "heading",
    "text": "## Blockquotes"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```md\n> This is a blockquote. It is usually rendered indented and with a different background color.\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "single_line_quote",
    "text": "> This is a blockquote. It is usually rendered indented and with a different background color."
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "## Bold and italic text"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```md\nThis text is **bold**.\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```md\nThis text is *italic*.\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```md\nThis text is both ***bold and italic***.\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "## Code snippets"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "## Columns"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```md\n:::row:::\n   :::column span=\"\":::\n      Content...\n   :::column-end:::\n   :::column span=\"\":::\n      More content...\n   :::column-end:::\n:::row-end:::\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```md\n:::row:::\n   :::column span=\"2\":::\n      **This is a 2-span column with lots of text.**\n\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec vestibulum mollis nunc\n      ornare commodo. Nullam ac metus imperdiet, rutrum justo vel, vulputate leo. Donec\n      rutrum non eros eget consectetur.\n   :::column-end:::\n   :::column span=\"\":::\n      **This is a single-span column with an image in it.**\n\n      ![Doc.U.Ment](media/markdown-reference/document.png)\n   :::column-end:::\n:::row-end:::\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "row",
    "text": ":::row:::\n   :::column span=\"2\":::\n      **This is a 2-span column with lots of text.**\n\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec vestibulum mollis nunc\n      ornare commodo. Nullam ac metus imperdiet, rutrum justo vel, vulputate leo. Donec\n      rutrum non eros eget consectetur.\n   :::column-end:::\n   :::column span=\"\":::\n      **This is a single-span column with an image in it.**\n\n      ![Doc.U.Ment](media/markdown-reference/document.png)\n   :::column-end:::\n:::row-end:::"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "## Comments"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```html\n<!--- Here's my comment --->\n```\n"
  },
  {
    "group": "alert",
    "text": "> [!WARNING]\n> Do not put private or sensitive information in HTML comments. Microsoft Learn carries HTML comments through to the published HTML that goes public. While HTML comments are invisible to the reader's eye, they are exposed in the HTML underneath.\n"
  },
  {
    "group": "heading",
    "text": "## Headings"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```md\n# This is a first level heading (H1)\n\n## This is a second level heading (H2)\n\n...\n\n###### This is a sixth level heading (H6)\n```\n"
  },
  {
    "group": "list",
    "text": "- There must be a space between the last `#` and heading text.\n- Each Markdown file must have one and only one H1 heading.\n- The H1 heading must be the first content in the file after the YML metadata block.\n- H2 headings automatically appear in the right-hand navigating menu of the published file. Lower-level headings don't appear, so use H2s strategically to help readers navigate your content.\n- HTML headings, such as `<h1>`, aren't recommended, and in some cases will cause build warnings.\n- You can link to individual headings in a file via [bookmark links](how-to-write-links.md#explicit-anchor-links).\n"
  },
  {
    "group": "heading",
    "text": "## HTML"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "## Images"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "list",
    "text": "- .jpg\n- .png\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```md\n\"resource\": [\n  {\n    \"files\" : [\n      \"**/*.png\",\n      \"**/*.jpg,\n      \"**/*.gif\"\n    ],\n```\n"
  },
  {
    "group": "heading",
    "text": "### Standard conceptual images (default Markdown)"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```Markdown\n![<alt text>](<folderPath>)\n\nExample:\n![alt text for image](../images/Introduction.png)\n```\n"
  },
  {
    "group": "image",
    "text": "![alt text for image](../images/Introduction.png)"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```md\n![ADextension_2FA_Configure_Step4](./media/bogusfilename/ADextension_2FA_Configure_Step4.PNG)\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```md\n![Active Directory extension for two-factor authentication, step 4: Configure](./media/bogusfilename/ADextension_2FA_Configure_Step4.PNG)\n```\n"
  },
  {
    "group": "heading",
    "text": "### Standard conceptual images (Learn Markdown)"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```md\n:::image type=\"content\" source=\"<folderPath>\" alt-text=\"<alt text>\":::\n```\n"
  },
  {
    "group": "single_line_image_ext",
    "text": ":::image type=\"content\" source=\"<folderPath>\" alt-text=\"<alt text>\":::"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "### Complex images with long descriptions"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```md\n:::image type=\"complex\" source=\"<folderPath>\" alt-text=\"<alt text>\":::\n   <long description here>\n:::image-end:::\n```\n"
  },
  {
    "group": "multi_line_image_ext",
    "text": ":::image type=\"complex\" source=\"<folderPath>\" alt-text=\"<alt text>\":::\n   <long description here>\n:::image-end:::"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "single_line_image_ext",
    "text": ":::image type=\"content\" source=\"media/markdown-reference/long-description.png\" alt-text=\"Screenshot of the HTML for an image and its long description.\":::"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "### Automatic borders"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "comment",
    "text": "<!-- This section can be allowed publicly, but there's no external guide article for how to use lightboxes, so we can't add it until we have an external-guide equivalent.\n\n### Creating an expandable image\n\nThe optional `lightbox` property allows you to create an expanded image, as described in [Create an expandable screenshot (lightbox)](contribute-how-to-use-lightboxes.md). The value of `lightbox` is the path to the expanded image.\n\n-->"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "### Specifying loc-scope"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "### Icons"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```md\n:::image type=\"icon\" source=\"<folderPath>\":::\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "comment",
    "text": "<!-- No lightbox article in external guide, so commenting this out for now.\n\nThe `lightbox` property works the same for `icon` images as for standard `content` images.\n\n-->"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "## Included Markdown files"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "list",
    "text": "- Inline: Reuse a common text snippet inline with within a sentence.\n- Block: Reuse an entire Markdown file as a block, nested within a section of an article.\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "### Includes syntax"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```md\n[!INCLUDE [<title>](<filepath>)]\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```md\nText before [!INCLUDE [<title>](<filepath>)] and after.\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "list",
    "text": "- Use block includes for significant amounts of content--a paragraph or two, a shared procedure, or a shared section. Don't use them for anything smaller than a sentence.\n- Includes won't be rendered in the GitHub-rendered view of your article because they rely on Microsoft Learn extensions. They'll be rendered only after publication.\n- Write all the text in an include file in complete sentences or phrases that don't depend on preceding or following text in the article that references the include. Ignoring this guidance creates an untranslatable string in the article.\n- Don't embed include files within other include files.\n- `/Includes` folders are excluded from build. Therefore, images stored in `/includes` folders and referenced in included files won't be displayed in published content. Store images in a `/media` folder outside the `/includes` folder.\n- As with regular articles, don't share media between include files. Use a separate file with a unique name for each include and article. Store the media file in the media folder that's associated with the include.\n- Don't use an include as the only content of an article.  Includes are meant to be supplemental to the content in the rest of the article.\n"
  },
  {
    "group": "heading",
    "text": "## Indentation"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```\n1. This is a numbered list example (one space after the period before the letter T).\n   This sentence is indented three spaces.\n   This code block is indented three spaces.\n\n- This is a bulleted list example (one space after the bullet before the letter T).\n  This sentence is indented two spaces.\n  > [!TIP]\n  > This tip is indented two spaces.\n  - This is a second-level bullet (indented two spaces, with one space after the bullet before the letter T).\n    This sentence is indented four spaces.\n    > This quote block is indented four spaces.\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "list",
    "text": "1. This is a numbered list example (one space after the period before the letter T).\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "   ```\n   This code block is indented three spaces.\n   ```\n"
  },
  {
    "group": "list",
    "text": "- This is a bulleted list example (one space after the bullet before the letter T).\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "alert",
    "text": "  > [!TIP]\n  > This tip is indented two spaces.\n"
  },
  {
    "group": "list",
    "text": "  - This is a second-level bullet (indented two spaces, with one space after the bullet before the letter T).\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "single_line_quote",
    "text": "    > This quote block is indented four spaces."
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "## Links"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "## Lists (Numbered, Bulleted, Checklist)"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "### Numbered list"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```md\n1. This is\n1. a parent numbered list\n   1. and this is\n   1. a nested numbered list\n1. (fin)\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "list",
    "text": "1. This is\n1. a parent numbered list\n   1. and this is\n   1. a nested numbered list\n1. (fin)\n"
  },
  {
    "group": "heading",
    "text": "### Bulleted list"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```md\n- This is\n- a parent bulleted list\n  - and this is\n  - a nested bulleted list\n- All done!\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "list",
    "text": "- This is\n- a parent bulleted list\n  - and this is\n  - a nested bulleted list\n- All done!\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "### Checklist"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```md\n> [!div class=\"checklist\"]\n> * List item 1\n> * List item 2\n> * List item 3\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "checklist",
    "text": "> [!div class=\"checklist\"]\n> * List item 1\n> * List item 2\n> * List item 3\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "## Next step action"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```markdown\n> [!div class=\"nextstepaction\"]\n> [button text](link to topic)\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```md\n> [!div class=\"nextstepaction\"]\n> [Learn about adding code to articles](code-in-docs.md)\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "next_step_action_ext",
    "text": "> [!div class=\"nextstepaction\"]\n> [Learn about adding code to articles](code-in-docs.md)\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "## Non-localized strings"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```markdown\n:::no-loc text=\"String\":::\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```md\n# Heading 1 of the Document\n\nMarkdown content within the :::no-loc text=\"Document\":::.  The are multiple instances of Document, document, and documents.\n```\n"
  },
  {
    "group": "alert",
    "text": "> [!NOTE]\n> Use `\\` to escape special characters:\n> ```markdown\n> Lorem :::no-loc text=\"Find a \\\"Quotation\\\"\"::: Ipsum.\n> ```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```yml\nauthor: cillroy\nno-loc: [Global, Strings, to be, Ignored]\n```\n"
  },
  {
    "group": "alert",
    "text": "> [!NOTE]\n> The no-loc metadata is not supported as global metadata in *docfx.json* file. The localization pipeline doesn't read the *docfx.json* file, so the no-loc metadata must be added into each individual source file.\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```md\n---\ntitle: Title of the Document\nauthor: author-name\ndescription: Description for the document\nno-loc: [Title, Document]\n---\n# Heading 1 of the Document\n\nMarkdown content within the document.\n```\n"
  },
  {
    "group": "comment",
    "text": "<!-- commenting out for now because no one knows what this means\n## Section definition\n\nYou might need to define a section. This syntax is mostly used for code tables.\nSee the following example:\n\n````\n> [!div class=\"tabbedCodeSnippets\" data-resources=\"OutlookServices.Calendar\"]\n> ```cs\n> <cs code text>\n> ```\n> ```javascript\n> <js code text>\n> ```\n````\n\nThe preceding blockquote Markdown text will be rendered as:\n> [!div class=\"tabbedCodeSnippets\" data-resources=\"OutlookServices.Calendar\"]\n> ```cs\n> <cs code text>\n> ```\n> ```javascript\n> <js code text>\n> ```\n-->"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "## Selectors"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "### Single selector"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```md\n> [!div class=\"op_single_selector\"]\n> - [Universal Windows](../articles/notification-hubs-windows-store-dotnet-get-started/)\n> - [Windows Phone](../articles/notification-hubs-windows-phone-get-started/)\n> - [iOS](../articles/notification-hubs-ios-get-started/)\n> - [Android](../articles/notification-hubs-android-get-started/)\n> - [Kindle](../articles/notification-hubs-kindle-get-started/)\n> - [Baidu](../articles/notification-hubs-baidu-get-started/)\n> - [Xamarin.iOS](../articles/partner-xamarin-notification-hubs-ios-get-started/)\n> - [Xamarin.Android](../articles/partner-xamarin-notification-hubs-android-get-started/)\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "op_single_selector_ext",
    "text": "> [!div class=\"op_single_selector\"]\n> - [Universal Windows](how-to-write-links.md)\n> - [Windows Phone](how-to-write-links.md)\n> - [iOS](how-to-write-links.md)\n> - [Android](how-to-write-links.md)\n> - [Kindle](how-to-write-links.md)\n> - [Baidu](how-to-write-links.md)\n> - [Xamarin.iOS](how-to-write-links.md)\n> - [Xamarin.Android](how-to-write-links.md)\n"
  },
  {
    "group": "heading",
    "text": "### Multi-selector"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```md\n> [!div class=\"op_multi_selector\" title1=\"Platform\" title2=\"Backend\"]\n> - [(iOS | .NET)](./mobile-services-dotnet-backend-ios-get-started-push.md)\n> - [(iOS | JavaScript)](./mobile-services-javascript-backend-ios-get-started-push.md)\n> - [(Windows universal C# | .NET)](./mobile-services-dotnet-backend-windows-universal-dotnet-get-started-push.md)\n> - [(Windows universal C# | Javascript)](./mobile-services-javascript-backend-windows-universal-dotnet-get-started-push.md)\n> - [(Windows Phone | .NET)](./mobile-services-dotnet-backend-windows-phone-get-started-push.md)\n> - [(Windows Phone | Javascript)](./mobile-services-javascript-backend-windows-phone-get-started-push.md)\n> - [(Android | .NET)](./mobile-services-dotnet-backend-android-get-started-push.md)\n> - [(Android | Javascript)](./mobile-services-javascript-backend-android-get-started-push.md)\n> - [(Xamarin iOS | Javascript)](./partner-xamarin-mobile-services-ios-get-started-push.md)\n> - [(Xamarin Android | Javascript)](./partner-xamarin-mobile-services-android-get-started-push.md)\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "op_multi_selector_ext",
    "text": "> [!div class=\"op_multi_selector\" title1=\"Platform\" title2=\"Backend\"]\n> - [(iOS | .NET)](how-to-write-links.md)\n> - [(iOS | JavaScript)](how-to-write-links.md)\n> - [(Windows universal C# | .NET)](how-to-write-links.md)\n> - [(Windows universal C# | Javascript)](how-to-write-links.md)\n> - [(Windows Phone | .NET)](how-to-write-links.md)\n> - [(Windows Phone | Javascript)](how-to-write-links.md)\n> - [(Android | .NET)](how-to-write-links.md)\n> - [(Android | Javascript)](how-to-write-links.md)\n> - [(Xamarin iOS | Javascript)](how-to-write-links.md)\n> - [(Xamarin Android | Javascript)](how-to-write-links.md)\n"
  },
  {
    "group": "heading",
    "text": "## Subscript and superscript"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```html\nHello <sub>This is subscript!</sub>\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```html\nGoodbye <sup>This is superscript!</sup>\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "## Tables"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```md\n|This is   |a simple   |table header|\n|----------|-----------|------------|\n|table     |data       |here        |\n|it doesn't|actually   |have to line up nicely!|\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "md_table",
    "text": "|This is   |a simple   |table header|\n|----------|-----------|------------|\n|table     |data       |here        |\n|it doesn't|actually   |have to line up nicely!|\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```md\n| Fun                  | With                 | Tables          |\n| :------------------- | -------------------: |:---------------:|\n| left-aligned column  | right-aligned column | centered column |\n| $100                 | $100                 | $100            |\n| $10                  | $10                  | $10             |\n| $1                   | $1                   | $1              |\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "md_table",
    "text": "| Fun                  | With                 | Tables          |\n| :------------------- | -------------------: |:---------------:|\n| left-aligned column  | right-aligned column | centered column |\n| $100                 | $100                 | $100            |\n| $10                  | $10                  | $10             |\n| $1                   | $1                   | $1              |\n"
  },
  {
    "group": "alert",
    "text": "> [!TIP]\n> The Learn Authoring Extension for VS Code makes it easy to add basic Markdown tables!\n>\n> You can also use an [online table generator](http://www.tablesgenerator.com/markdown_tables).\n"
  },
  {
    "group": "heading",
    "text": "### Line breaks within words in any table cell"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```md\n> [!div class=\"mx-tdBreakAll\"]\n> |Name|Syntax|Mandatory for silent installation?|Description|\n> |-------------|----------|---------|---------|\n> |Quiet|/quiet|Yes|Runs the installer, displaying no UI and no prompts.|\n> |NoRestart|/norestart|No|Suppresses any attempts to restart. By default, the UI will prompt before restart.|\n> |Help|/help|No|Provides help and quick reference. Displays the correct use of the setup command, including a list of all options and behaviors.|\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "multi_line_quote",
    "text": "> [!div class=\"mx-tdBreakAll\"]\n> |Name|Syntax|Mandatory for silent installation?|Description|\n> |-------------|----------|---------|---------|\n> |Quiet|/quiet|Yes|Runs the installer, displaying no UI and no prompts.|\n> |NoRestart|/norestart|No|Suppresses any attempts to restart. By default, the UI will prompt before restart.|\n> |Help|/help|No|Provides help and quick reference. Displays the correct use of the setup command, including a list of all options and behaviors.|\n"
  },
  {
    "group": "heading",
    "text": "### Line breaks within words in second column table cells"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "### Inconsistent column widths between tables"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "list",
    "text": "- Interlacing HTML code with Markdown makes topics more complicated and discourages community contributions.\n- A table that you make look good for a specific screen size may end up looking unreadable at different screen sizes as it preempts responsive rendering.\n"
  },
  {
    "group": "heading",
    "text": "### Data matrix tables"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```md\n|                  |Header 1 |Header 2|\n|------------------|---------|--------|\n|**First column A**|Cell 1A  |Cell 2A |\n|**First column B**|Cell 1B  |Cell 2B |\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "md_table",
    "text": "|                  |Header 1 |Header 2|\n|------------------|---------|--------|\n|**First column A**|Cell 1A  |Cell 2A |\n|**First column B**|Cell 1B  |Cell 2B |\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "alert",
    "text": "> [!TIP]\n> The Learn Authoring Pack for VS Code includes a function to convert a regular Markdown table into a data matrix table. Just select the table, right-click, and select **Convert to data matrix table**.\n"
  },
  {
    "group": "heading",
    "text": "### HTML Tables"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "frontmatter",
    "text": "---\nauthor: mammerla\nms.author: v-bbortree\ntitle: Entity Documentation - minecraft:dweller\nms.prod: gaming\n---"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "# Entity Documentation - minecraft:dweller"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "## Parameters"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "md_table",
    "text": "|Name |Default Value  |Type  |Description  |\n|:----------|:----------|:----------|:----------|\n| dwelling_type| *not_set*| String| The type of dwelling the mob wishes to join. Current Types: village |\n|dweller_role|*not set* | String |  The role of which the mob plays in the dwelling. Current Roles: inhabitant, defender, hostile, passive. |\n|update_interval_base|*not set* | Decimal| How often the mob checks on their dwelling status in ticks. Positive values only. |\n|update_interval_variant|*not set* | Decimal|  The variant value in ticks that will be added to the update_interval_base. |\n|can_find_poi| *not set*| Boolean|  Whether or not the mob can find and add POI's to the dwelling. |\n|first_founding_reward| *not set*| Integer|  How much reputation should the players be rewarded on first founding? |\n|can_migrate| *not set*| Boolean| Can this mob migrate between dwellings? Or does it only have its initial dwelling? |\n|dwelling_bounds_tolerance| *not set*| Float | A padding distance for checking if the mob is within the dwelling. |\n|preferred_profession| *not set*| String| Allows the user to define a starting profession for this particular Dweller, instead of letting them choose organically. (They still need to gain experience from trading before this takes effect.) |\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "## Example"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```json\n\"minecraft:dweller\": {\n    \"dwelling_type\": \"village\",\n    \"dweller_role\": \"inhabitant\",\n    \"preferred_profession\": \"toolsmith\",\n    \"update_interval_base\": 60,\n    \"update_interval_variant\": 40,\n    \"can_find_poi\": true,\n    \"can_migrate\": true,\n    \"first_founding_reward\": 5\n}\n```\n"
  },
  {
    "group": "heading",
    "text": "## Vanilla entities examples"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "### villager_v2"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```json\n\"minecraft:dweller\": {\n    \"dwelling_type\": \"  \",\n    \"dweller_role\": \"inhabitant\",\n    \"preferred_profession\": \"farmer\",\n    \"update_interval_base\": 60,\n    \"update_interval_variant\": 40,\n    \"can_find_poi\": true,\n    \"can_migrate\": true,\n    \"first_founding_reward\": 5\n}\n```\n"
  },
  {
    "group": "heading",
    "text": "## Vanilla entities using `minecraft:dweller`"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "list",
    "text": "- [cat](../../../../Source/VanillaBehaviorPack_Snippets/entities/cat.md)\n- [evocation_illager](../../../../Source/VanillaBehaviorPack_Snippets/entities/evocation_illager.md)\n- [iron_golem](../../../../Source/VanillaBehaviorPack_Snippets/entities/iron_golem.md)\n- [evocation_illager](../../../../Source/VanillaBehaviorPack_Snippets/entities/evocation_illager.md)\n- [pillager](../../../../Source/VanillaBehaviorPack_Snippets/entities/pillager.md)\n- [ravager](../../../../Source/VanillaBehaviorPack_Snippets/entities/ravager.md)\n- [villager_v2](../../../../Source/VanillaBehaviorPack_Snippets/entities/villager_v2.md)\n- [vindicator](../../../../Source/VanillaBehaviorPack_Snippets/entities/vindicator.md)\n- [witch](../../../../Source/VanillaBehaviorPack_Snippets/entities/witch.md)\n"
  },
  {
    "group": "frontmatter",
    "text": "---\nauthor: kakinnun\nms.author: kakinnun\ntitle: 1.19.70 Update Notes\nms.prod: gaming\ndescription: Update summary of Creator changes in Bedrock 1.19.70\n---"
  },
  {
    "group": "heading",
    "text": "# Minecraft Bedrock 1.19.70 Update Notes for Creators"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "## Holiday Creator Features ##"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "list",
    "text": "- [Block Properties and Permutations](../Reference/Content/BlockReference/Examples/BlockPropertiesAndPermutations.md)\n"
  },
  {
    "group": "heading",
    "text": "## Components ##"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "list",
    "text": "- /clone\n- /execute\n- /fill\n- /setblock\n- /testforblock\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "## Creator API ##"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "frontmatter",
    "text": "---\nauthor: mammerla\nms.author: v-jillheaden\ntitle: Popular Commands\nms.prod: gaming\ndescription: \"A guide covering many of the most common commands that are used within Minecraft: Bedrock Edition\"\n---"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "# Popular Commands"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "checklist",
    "text": "> [!div class=\"checklist\"]\n>\n> - Some of the more popular commands to use when starting out.\n"
  },
  {
    "group": "heading",
    "text": "### Requirements"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "list",
    "text": "- [Introduction to Commands](CommandsIntroduction.md)\n- [Getting Started with Command Blocks](CommandBlocks.md)\n"
  },
  {
    "group": "heading",
    "text": "## /help"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```\n/help <page: int>\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```\n/help [command: CommandName]\n```\n"
  },
  {
    "group": "heading",
    "text": "## /effect"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "## /execute"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```\n/execute <origin: target> <position: x y z> <command: command>\n\n/execute <origin: target> <position: x y z> detect <detectPos: x y z> <block: Block> <data: int> <command: command>\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```\n/execute @a ~ ~ ~ detect ~ ~-1 ~ grass 0 say Player is standing on top of grass.\n```\n"
  },
  {
    "group": "heading",
    "text": "## /gamemode"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```\n/gamemode <gameMode: GameMode> [player: target]\n/gamemode <gameMode: int> [player: target]\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```\n/gamemode creative\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```\n/gamemode adventure @a[tag=sometag]\n```\n"
  },
  {
    "group": "heading",
    "text": "## /gamerule"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```\n/gamerule <rule: BoolGameRule> [value: Boolean]\n/gamerule <rule: IntGameRule> [value: int]\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "### \"commandblockoutput\""
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```\n/gamerule commandblockoutput false\n```\n"
  },
  {
    "group": "heading",
    "text": "### \"sendcommandfeedback\""
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```\n/gamerule sendcommandfeedback false\n```\n"
  },
  {
    "group": "heading",
    "text": "### \"commandblocksenabled\""
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```\n/gamerule commandblocksenabled false\n```\n"
  },
  {
    "group": "heading",
    "text": "### \"dodaylightcycle\""
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```\n/gamerule dodaylightcycle false\n```\n"
  },
  {
    "group": "heading",
    "text": "### \"doweathercycle\""
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```\n/gamerule doweathercycle false\n```\n"
  },
  {
    "group": "heading",
    "text": "## /give, /clear, /replaceitem"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "## /locate"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```\n/locate biome <biome name>\n/locate structure <structure name>\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```\n/locate biome beach\n/locate structure village\n```\n"
  },
  {
    "group": "heading",
    "text": "## /scoreboard"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```\n/scoreboard objectives add objectiveA dummy\n\n/scoreboard objectives setdisplay sidebar objectiveA\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```\n/scoreboard players add @p objectiveA 1\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```\n@a[scores={objectiveA=10..}]\n```\n"
  },
  {
    "group": "heading",
    "text": "## /setblock, /fill, /clone"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "## /summon"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "## /setworldspawn"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```\n/setworldspawn [spawnPoint: x y z]\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "## /tag"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```\n/tag @e[type=sheep] add boss\n/tag @e[type=minecart] add boss\n```\n"
  },
  {
    "group": "code_block",
    "text": "```\n/say Bosses: @e[tag=boss]\n```\n"
  },
  {
    "group": "heading",
    "text": "## /tellraw, /titleraw"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```\n/tellraw @a {\"rawtext\":[{\"translate\":\"commands.testfor.success\",\"with\":[\"PlayerName\"]}]}\n\n/tellraw @a {\"rawtext\":[{\"text\":\"Hello World\"}]}\n```\n"
  },
  {
    "group": "heading",
    "text": "## /testfor, /testforblock, /testforblocks"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "## /time set"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```\n/time set <amount: int>\n/time set <time: TimeSpec>\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```\n/time set noon\n```\n"
  },
  {
    "group": "heading",
    "text": "## /tp or /teleport"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```\n/tp <victim: target> <destination: target> [checkForBlocks: Boolean]\n/tp <victim: target> <destination: x y z> [checkForBlocks: Boolean]\n/tp <victim: target> <destination: x y z> [yRot: value] [xRot: value] [checkForBlocks: Boolean]\n/tp <victim: target> <destination: x y z> facing <lookAtEntity: target> [checkForBlocks: Boolean]\n/tp <victim: target> <destination: x y z> facing <lookAtPosition: x y z> [checkForBlocks: Boolean]\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```\n/tp @p 100 50 100\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```\n/tp Steve Alex\n/tp @p @e[type=minecraft:armor_stand,c=1]\n/tp @a @e[type=minecraft:creeper,tag=destination_1]\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```\n/tp Steve 50 63 50 true\n```\n"
  },
  {
    "group": "alert",
    "text": "> [!NOTE]\n> One of the differences between using commands and commands blocks is that `/tp @s ...` will not work in a command block.\n"
  },
  {
    "group": "heading",
    "text": "## /weather"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```\n/weather <clear|rain|thunder> [duration: int]\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```\n/weather thunder 600\n```\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "## What's Next?"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "next_step_action_ext",
    "text": "> [!div class=\"nextstepaction\"]\n> [How to Make a Complete the Monument World](CommandsHowToMakeACTMWorld.md)\n"
  },
  {
    "group": "frontmatter",
    "text": "---\nauthor: mammerla\nms.author: mikeam\ntitle: Recipe Documentation - Potion Brewing Container Recipe\nms.prod: gaming\n---"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "# Recipe Documentation - Potion Brewing Container Recipe"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "## Parameters"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "md_table",
    "text": "|Name |Type |Description |\n|:-----------|:-----------|:-----------|\n|input| potion| Input potion used in the brewing container recipe. |\n|output| potion| Output potion from the brewing container recipe. |\n|reagent| item| Item used in the brewing container recipe with the input potion. |\n|tags|String array | Item that can create the Brewing Container Recipe, such as \"brewing_stand\". |\n"
  },
  {
    "group": "heading",
    "text": "## Potion Brewing Container Recipe Example"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_block",
    "text": "```JSON\n{\n\"format_version\": \"1.17\",\n    \"minecraft:recipe_brewing_container\": {\n    \"description\": {\n        \"identifier\": \"minecraft:brew_potion_sulphur\"\n    },\n    \"tags\": [ \"brewing_stand\" ],\n    \"input\": \"minecraft:potion\",\n    \"reagent\": \"minecraft:gunpowder\",\n    \"output\": \"minecraft:splash_potion\"\n    }\n}\n```\n"
  },
  {
    "group": "heading",
    "text": "## Vanilla Example"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "heading",
    "text": "### Brew Potion Sulphur"
  },
  {
    "group": "line_break",
    "text": "\n\n"
  },
  {
    "group": "code_ext",
    "text": ":::code language=\"json\" source=\"../../../../Source/VanillaBehaviorPack/recipes/brew_potion_sulphur.json\":::"
  }
]